#!/usr/bin/env node

var config =     require('./node_modules/octo-client/config.js');
var express =    require('express');
var http =       require('http');
var OctoPrint =  require('octo-client');
var package =    require('./package.json');
var port =       normalizePort(process.env.PORT || '3000');

// --------------------------------------------------------------------------
// Express app
// --------------------------------------------------------------------------
var app =        express();
app.get('/', function(req, res, next) {
  res.send('<h1>octo-pause v' + package.version + '</h1><h2>http://' + config.hostName + '/api/job/pause</h2>...will pause this printer.');
});
app.get('/api/job/pause', function(req, res, next) {
  OctoPrint.jobPause(function(response){
    console.log(response);
    res.send('ok');
  });
});
app.use(function(req, res, next)      {next(createError(404));});
app.use(function(err, req, res, next) {res.locals.message = err.message; res.locals.error = req.app.get('env') === 'development' ? err : {}; res.status(err.status || 500); res.send('404 error');});

// --------------------------------------------------------------------------
// HTTP server
// --------------------------------------------------------------------------
app.set('port', port); var server = http.createServer(app); server.listen(port); server.on('error', onError); server.on('listening', onListening);
function normalizePort(val) {var port = parseInt(val, 10); if (isNaN(port)) {return val;} if (port >= 0) {return port;} return false;}
function onError(error) {if (error.syscall !== 'listen') {throw error;} var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port; switch (error.code) {case 'EACCES':        console.error(bind + ' requires elevated privileges'); process.exit(1); break; case 'EADDRINUSE':    console.error(bind + ' is already in use'); process.exit(1); break; default: throw error;}}
function onListening() {var addr = server.address(); var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port; console.log('Listening on ' + bind);}
